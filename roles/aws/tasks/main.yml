---
- name: "install aws cli and boto"
  pip:
    name: "{{ item }}"
    state: latest
    virtualenv: "~/ansible"
  with_items:
    - awscli
    - boto3
    - boto
- name: "create directories"
  file:
    path: "~/{{ item }}"
    state: directory
  with_items:
    - ".aws/"
    - ".resource/"
- name: "copy configuration and credential files"
  template:
    src: "{{ item.src }}"
    dest: "~/{{ item.dest }}"
    mode: 0600
  with_items:
    - src: aws_cli_config.j2
      dest: ".aws/config"
    - src: aws_cli_credentials.j2
      dest: ".aws/credentials"
- name: "put private key"
  copy:
    content: "{{ builder_id_rsa }}"
    dest: "~/.ssh/id_rsa"
    mode: 0600
- name: "setup secondary ip"
  template:
    src: ifcfg-eth0:0
    dest: /etc/sysconfig/network-scripts/
  when: secondary_ip is defined
  notify: require reboot
- name: "Setup commands"
  blockinfile:
    dest: ~/.bashrc
    insertafter: BOF
    state: present
    block: |
      function {{ item.name }}() {
      {% if item.pre_command is defined %}
        {{ item.pre_command}}
      {% endif %}
        {{ item.command }} "$@"
      {% if item.post_command is defined %}
        {{ item.post_command}}
      {% endif %}
      }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{item.name}}"
  when: aws_builder | default(False)
  with_items:
    - name: buildAws
      command: "ansible-playbook {{ site_root }}/site-builder/playbooks/build-aws.yml"
      post_command: connectAws
    - name: buildHosts
      command: "ansible-playbook {{ site_root }}/site-builder/playbooks/site.yml"
    - name: connectAws
      pre_command: startEc2
      command: ansible-playbook -e mode=present ~/.resource/connect_aws.yml
    - name: disconnectAws
      command: ansible-playbook -e mode=absent ~/.resource/connect_aws.yml
    - name: stopEc2
      pre_command: disconnectAws
      command: ansible-playbook ~/.resource/stop_ec2.yml
    - name: startEc2
      command: ansible-playbook -e target_state=running ~/.resource/stop_ec2.yml
    - name: restartEc2
      command: ansible-playbook -e target_state=restarted ~/.resource/stop_ec2.yml
    - name: terminateEc2
      pre_command: disconnectAws
      command: ansible-playbook -e target_state=absent ~/.resource/stop_ec2.yml
    - name: destroyAws
      pre_command: terminateEc2
      command: ansible-playbook ~/.resource/destroy_vpc.yml
