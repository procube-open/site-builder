---
- name: compose containers
  hosts: targets
  gather_facts: False
  become: false
  tags: compose-containers
  vars:
    ansible_connection: local
    ansible_python_interpreter: "../../ansible/bin/python"

  tasks:
  - name: load variables from parent vars directory
    tags: directories, networks, compose-up, compose-files, backup-restore
    include_vars: "{{ item }}"
    with_fileglob: "../../config/vars/*.yml"
  - name: "setup docker compose file - create base dir"
    tags: directories
    file:
      path: "../../hosts.d/{{ inventory_hostname }}"
      state: directory
      mode: 0755
  - name: "setup docker compose file - create dir"
    tags: directories
    # become_user: "{{ safe_builder }}"
    file:
      path: "../../hosts.d/{{ inventory_hostname }}/{{ item }}"
      state: directory
      mode: 0755
    with_items: "{{ services | default([])}}"
  - name: create networks
    tags: networks
    docker_network:
      name: "{{ item.name }}"
      driver: "{{ item.driver | default(omit) }}"
      driver_options: "{{ item.driver_options | default(omit) }}"
      docker_host: "tcp://{{ inventory_hostname }}:2376"
      tls: yes
      cacert_path: "../../.docker/ca.pem"
      cert_path: "../../.docker/cert.pem"
      key_path:  "../../.docker/key.pem"
    loop: "{{ networks }}"
    when: networks is defined

  - name: "setup docker compose file"
    connection: local
    tags: compose-files
    # become_user: "{{ safe_builder }}"
    template:
      src: "../../config/services/{{ item }}/docker-compose.yml"
      dest: "../../hosts.d/{{ inventory_hostname }}/{{ item }}/docker-compose.yml"
    with_items: "{{ services | default([])}}"

  - name: login to private registry
    tags: compose-up
    docker_login:
      registry: "{{ registry }}"
      username: "{{ docker_login_user }}"
      password: "{{ lookup('file', '../../registry/registry_password') }}"
      email: "{{ docker_login_email }}"
      docker_host: "tcp://{{ inventory_hostname }}:2376"
      tls: yes
      cacert_path: "../../.docker/ca.pem"
      cert_path: "../../.docker/cert.pem"
      key_path:  "../../.docker/key.pem"
    run_once: True

  - name: docker-compose up
    tags: compose-up
    docker_service:
      project_src: "../../hosts.d/{{ inventory_hostname }}/{{ item }}"
      pull: True
      state: present
      docker_host: "tcp://{{ inventory_hostname }}:2376"
      tls: yes
      cacert_path: "../../.docker/ca.pem"
      cert_path: "../../.docker/cert.pem"
      key_path:  "../../.docker/key.pem"
    loop: "{{ services | default([])}}"
    when: swarm_master is not defined

  - name: deploy service stacks
    tags: compose-up
    shell: "DOCKER_HOST='tcp://{{ inventory_hostname }}:2376' DOCKER_TLS_VERIFY=1 docker stack deploy --prune --with-registry-auth --compose-file docker-compose.yml {{ item }}"
    args:
      chdir: "../../hosts.d/{{ inventory_hostname }}/{{ item }}"
    with_items: "{{ services | default([])}}"
    when: swarm_master is defined

  - name: install backup shell script
    tags: backup-restore
    template:
      src: "do{{ item }}.sh"
      dest: "../../hosts.d/{{ inventory_hostname }}/do{{ item }}"
      mode: 0755
    with_items:
      - Backup
      - Restore
    when: backup_scripts is defined
