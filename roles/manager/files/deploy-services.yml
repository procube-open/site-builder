---
- name: compose containers
  hosts: targets
  gather_facts: False
  become: false
  tags: compose-containers

  tasks:
  - name: load variables from parent vars directory
    tags: directories, networks, compose-up, compose-files, backup-restore
    include_vars: "{{ item }}"
    with_fileglob: "../../config/vars/*.yml"
  - name: "setup docker compose file - create base dir"
    connection: local
    tags: directories
    file:
      path: "../../hosts.d/{{ inventory_hostname }}"
      state: directory
      mode: 0755
  - name: "setup docker compose file - create dir"
    connection: local
    tags: directories
    # become_user: "{{ safe_builder }}"
    file:
      path: "../../hosts.d/{{ inventory_hostname }}/{{ item }}"
      state: directory
      mode: 0755
    with_items: "{{ services | default([])}}"

  - name: add host for delegator
    tags: networks
    add_host:
      hostname: "dlg-{{ item }}"
      ansible_connection: local
      enviroment:
        DOCKER_HOST: "tcp://{{ item }}:2376"
        DOCKER_TLS_VERIFY: 1
      ansible_python_interpreter: "../../ansible/bin/python"
    with_items: "{{ play_hosts }}"
    changed_when: False

  - name: create networks
    delegate_to: "dlg-{{ inventory_hostname }}"
    tags: networks
    docker_network:
      name: "{{ item.name }}"
      driver: "{{ item.driver | default(omit) }}"
      driver_options: "{{ item.driver_options | default(omit) }}"
      docker_host: "tcp://{{ inventory_hostname }}:2376"
      tls: yes
      cacert_path: "../../.docker/ca.pem"
      cert_path: "../../.docker/cert.pem"
      key_path:  "../../.docker/key.pem"
    with_items: "{{ networks | default([])}}"

  - name: "setup docker compose file"
    connection: local
    tags: compose-files
    # become_user: "{{ safe_builder }}"
    template:
      src: "../../config/services/{{ item }}/docker-compose.yml"
      dest: "../../hosts.d/{{ inventory_hostname }}/{{ item }}/docker-compose.yml"
    with_items: "{{ services | default([])}}"

  - name: login to private registry
    delegate_to: "dlg-{{ inventory_hostname }}"
    tags: compose-up
    docker_login:
      registry: "{{ registry }}"
      username: "{{ docker_login_user }}"
      password: "{{ lookup('file', '../../registry/registry_password') }}"
      email: "{{ docker_login_email }}"
      docker_host: "tcp://{{ inventory_hostname }}:2376"
      tls: yes
      cacert_path: "../../.docker/ca.pem"
      cert_path: "../../.docker/cert.pem"
      key_path:  "../../.docker/key.pem"

  - name: compose up containers
    connection: local
    tags: compose-up
    shell: "DOCKER_HOST='tcp://{{ inventory_hostname }}:2376' DOCKER_TLS_VERIFY=1 docker-compose up -d"
    args:
      chdir: "../../hosts.d/{{ inventory_hostname }}/{{ item }}"
    loop: "{{ services | default([])}}"
    when: swarm_master is not defined

  - name: deploy service stacks
    connection: local
    tags: compose-up
    shell: "DOCKER_HOST='tcp://{{ inventory_hostname }}:2376' DOCKER_TLS_VERIFY=1 docker stack deploy --prune --with-registry-auth --compose-file docker-compose.yml {{ item }}"
    args:
      chdir: "../../hosts.d/{{ inventory_hostname }}/{{ item }}"
    with_items: "{{ services | default([])}}"
    when: swarm_master is defined

  - name: install backup shell script
    connection: local
    tags: backup-restore
    template:
      src: "do{{ item }}.sh"
      dest: "../../hosts.d/{{ inventory_hostname }}/do{{ item }}"
      mode: 0755
    with_items:
      - Backup
      - Restore
    when: backup_scripts is defined
