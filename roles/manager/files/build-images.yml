---
- name: build images
  gather_facts: False
  hosts: images
  # serial: 1

  tasks:
  - name: load variables from parent vars directory
    include_vars: "{{ item }}"
    with_fileglob: "../../config/vars/*.yml"
  - name: login to private registry
    delegate_to: localhost
    connection: local
    run_once: True
    docker_login:
      registry: "{{ registry }}"
      username: "{{ docker_login_user }}"
      password: "{{ lookup('file', '../../registry/registry_password') }}"
      email: "{{ docker_login_email }}"

  - name: set connection property for images
    delegate_to: localhost
    connection: local
    set_fact:
      ansible_connection: docker
      image_tag: "{{registry}}/{{project_name}}/{{ inventory_hostname }}:{{ image_tag | default('latest')}}"
      ansible_host: "build_image_{{ inventory_hostname }}"

  - name: remove previous from-image
    delegate_to: localhost
    connection: local
    shell: |
      docker rmi "{{ from }}"
    register: rmi_result
    changed_when: rmi_result.rc == 0
    failed_when: false

  - name: invoke container
    delegate_to: localhost
    connection: local
    docker_container:
      image: "{{ from }}"
      name: "build_image_{{ inventory_hostname }}"
      hostname: "{{ inventory_hostname }}"
      env: "{{ env | default(omit) }}"
      privileged: "{{ privileged | default(omit) }}"
      volumes: "{{ volumes | default(omit) }}"
      entrypoint: "{{ build_override_entrypoint | default(entrypoint) | default(omit) }}"
      working_dir: "{{ build_override_working_dir | default(working_dir) | default(omit) }}"
      command: "{{ build_override_command | default(command) | default(omit) }}"
      stop_signal: "{{ stop_signal | default(omit) }}"
      user: "{{ user | default(omit) }}"

  - name: inspect from image
    delegate_to: localhost
    connection: local
    docker_image_facts:
      name: "{{ from }}"
    register: from_image_fact
  - set_fact:
      orig_config: "{{ from_image_fact.images[0].Config }}"

  - name: include role playbooks
    include_tasks: role.yml
    # following code does not work(last role_item is called repeatedly)
    # include_role:
    #   name: "{{ role_item }}"
    loop: "{{ roles | default([]) }}"
    loop_control:
      loop_var: role_item

  - name: reset build overrides
    # original Config for alpine {"Cmd": ["/bin/sh"],"WorkingDir": "","Entrypoint": null}
    # original Config for centos {"Cmd": ["/bin/bash"],"WorkingDir": "","Entrypoint": null}
    set_fact:
      reset_build_overrides: ""
  - set_fact:
      # --change CMD cannot set null, so set []
      reset_build_overrides: "{{reset_build_overrides}} --change 'CMD {% if command is defined %}{{ command | to_json }}{% elif orig_config.Cmd == none %}[]{% else %}{{ orig_config.Cmd | to_json }}{% endif %}'"
    when: build_override_command is defined
  - set_fact:
      # --change WORKDIR cannot set "", so set /
      reset_build_overrides: "{{reset_build_overrides}} --change 'WORKDIR {% if working_dir is defined %}{{ working_dir | to_json }}{% elif orig_config.WorkingDir == '' %}/{% else %}{{ orig_config.WorkingDir | to_json }}{% endif %}'"
    when: build_override_working_dir is defined
  - set_fact:
      # --change 'ENTRYPOINT []' does not set null, so set ["/bin/sh"]
      reset_build_overrides: "{{reset_build_overrides}} --change 'ENTRYPOINT {% if entrypoint is defined %}{{ entrypoint | to_json }}{% elif orig_config.Entrypoint == none %}[\"/bin/sh\"]{% else %}{{ orig_config.Entrypoint | to_json }}{% endif %}'"
    when: build_override_entrypoint is defined

  - name: commit image
    delegate_to: localhost
    connection: local
    shell: |
      docker stop "build_image_{{ inventory_hostname }}"
      docker rmi -f "{{ image_tag }}"
      docker commit {{ reset_build_overrides }} "build_image_{{ inventory_hostname }}"  "{{ image_tag }}"
      docker rm "build_image_{{ inventory_hostname }}"

  - name: push image
    delegate_to: localhost
    connection: local
    shell: |
      docker push "{{ image_tag }}"
