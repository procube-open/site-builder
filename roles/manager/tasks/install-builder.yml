---
- name: "setup tls connection - create dir"
  file:
    path: ".docker"
    state: directory
    mode: 0700
- name: "setup tls connection - put certs"
  copy:
    remote_src: yes
    src: "{{ item.src }}"
    dest: "~/{{ item.dest }}"
    mode: 0600
  with_items:
    - src: /etc/pki/ca-trust/source/anchors/cacert.pem
      dest: ".docker/ca.pem"
    - src: "/etc/pki/tls/private/{{ inventory_hostname }}_key.pem"
      dest: ".docker/key.pem"
    - src: "/etc/pki/tls/certs/{{ inventory_hostname }}_cert.pem"
      dest: ".docker/cert.pem"
- name: "install playbooks - create directory"
  become_user: "{{ builder }}"
  file:
    path: "site-builder/playbooks"
    state: directory
    mode: 0755

- name: "install playbooks - copy file"
  become_user: "{{ builder }}"
  copy:
    src: "{{ item }}"
    dest: "~/site-builder/playbooks"
    mode: 0644
  with_items:
    - build-images.yml
    - role.yml
    - deploy-services.yml
    - undeploy-services.yml
    - doBackup.sh
    - doRestore.sh

- name: "setup docker connection - create dir"
  become_user: "{{ builder }}"
  file:
    path: "hosts.d/{{ item }}"
    state: directory
    mode: 0755
  with_items: "{{ groups['targets'] }}"

- name: "setup docker connection - shortcut alias"
  become_user: "{{ builder }}"
  blockinfile:
    path: .bashrc
    insertafter: BOF
    state: present
    block: "alias dlg-{{ item }}='export DOCKER_SWARM_MANAGER={{ hostvars[item].swarm_master | default('') }};export DOCKER_HOST=tcp://{{ item }}:2376;export DOCKER_TLS_VERIFY=1; PSSAVE=${PSSAVE:-$PS1}; PS1=\"[dlg-{{ item }}@\\h \\W]\\$ \"'"
    marker: "# {mark} ANSIBLE MANAGED BLOCK dlg shortcut {{item}}"
  with_items: "{{ groups['targets'] }}"

- name: "setup docker connection - shortcut revert"
  become_user: "{{ builder }}"
  blockinfile:
    path: .bashrc
    insertafter: BOF
    state: present
    block: "alias revert-dlg='unset DOCKER_HOST=;unset DOCKER_TLS_VERIFY; unset DOCKER_SWARM_MANAGER; PS1=\"$PSSAVE\"; unset PSSAVE'
    marker: "# {mark} ANSIBLE MANAGED BLOCK dlg shortcut revert dlg"

- name: "install private key for ssh to target machines"
  become_user: "{{ builder }}"
  copy:
    content: "{{ builder_id_rsa }}"
    dest: "~/.ssh/id_rsa"
    mode: 0600
  when: builder_id_rsa is defined

- name: "Setup commands"
  become_user: "{{ builder }}"
  blockinfile:
    dest: .bashrc
    insertafter: BOF
    state: present
    block: |
      function {{ item.name }}() {
      {% if item.pre_command is defined %}
        {{ item.pre_command}}
      {% endif %}
        {{ item.command }} "$@"
      {% if item.post_command is defined %}
        {{ item.post_command}}
      {% endif %}
      }
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{item.name}}"
  with_items:
    - name: buildImages
      command: ansible-playbook ~/site-builder/playbooks/build-images.yml
    - name: deployServices
      command: ansible-playbook ~/site-builder/playbooks/deploy-services.yml
    - name: undeployServices
      command: ansible-playbook ~/site-builder/playbooks/undeploy-services.yml
    - name: dexec
      pre_command: |-
        if [ -n "$DOCKER_SWARM_MANAGER" ]; then
          docker_command=$(docker service ps "$1" --format "{% raw %}{{ 'docker -H tcp://{{.Node}}:2376 exec -it {{.Name}}.{{.ID}}' }}{% endraw %}" --filter desired-state=running --no-trunc | head -1)
        else
          docker_command="docker exec -it $1"
        fi
        shift
      command: $docker_command
    - name: dbash
      pre_command: set -- $1 /bin/sh -c "stty rows $(tput lines) cols $(tput cols) && export TERM=$TERM && exec bash"
      command: dexec "$@"
    - name: dash
      pre_command: set -- $1 /bin/sh -c "stty rows $(tput lines) cols $(tput cols) && export TERM=$TERM && exec ash"
      command: dexec "$@"
